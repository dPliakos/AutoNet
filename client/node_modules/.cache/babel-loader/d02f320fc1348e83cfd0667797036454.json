{"remainingRequest":"C:\\Users\\Τρίχας\\Desktop\\AutoNet\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Τρίχας\\Desktop\\AutoNet\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Τρίχας\\Desktop\\AutoNet\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Τρίχας\\Desktop\\AutoNet\\client\\src\\components\\NewNetwork\\NewNetworkCatalog.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Τρίχας\\Desktop\\AutoNet\\client\\src\\components\\NewNetwork\\NewNetworkCatalog.vue","mtime":1616965386392},{"path":"C:\\Users\\Τρίχας\\Desktop\\AutoNet\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Τρίχας\\Desktop\\AutoNet\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Τρίχας\\Desktop\\AutoNet\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Τρίχας\\Desktop\\AutoNet\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vIGltcG9ydCB7IHJlYWN0aXZlIH0gZnJvbSAndnVlJzsKaW1wb3J0IE5ld05ldHdvcmtDYXRhbG9nTm9kZSBmcm9tICcuL05ld05ldHdvcmtDYXRhbG9nTm9kZS52dWUnOwppbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi4vY2hlY2tib3gudnVlJzsgLy8gaW1wb3J0IHsgdG9SZWYgfSBmcm9tICd2dWUnCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ05ld05ldHdvcmsnLAogIGNvbXBvbmVudHM6IHsKICAgIE5ld05ldHdvcmtDYXRhbG9nTm9kZTogTmV3TmV0d29ya0NhdGFsb2dOb2RlLAogICAgQ2hlY2tib3g6IENoZWNrYm94CiAgfSwKICBwcm9wczogewogICAgbm9kZXM6IHsKICAgICAgdHlwZTogQXJyYXkKICAgIH0sCiAgICBuZXR3b3JrczogewogICAgICB0eXBlOiBBcnJheQogICAgfSwKICAgIGZpbmlzaGVkU2Nhbjoge30KICB9LAogIG1ldGhvZHM6IHsKICAgIGNoZWNrQWxsQ2hhbmdlOiBmdW5jdGlvbiBjaGVja0FsbENoYW5nZSh2YWx1ZSkgewogICAgICB0aGlzLiRyZWZzLm5vZGVzUmVmLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgICBlbGVtZW50Lm5vZGUuZGVsZXRlID09IGZhbHNlID8gZWxlbWVudC5jaGVja0FsbCh2YWx1ZSkgOiBudWxsOwogICAgICB9KTsKICAgIH0sCiAgICBpbmZvTmV0OiBmdW5jdGlvbiBpbmZvTmV0KCkgewogICAgICBpZiAodGhpcy5uZXR3b3Jrcy5sZW5ndGggPCAxKSB7CiAgICAgICAgcmV0dXJuICJOZXR3b3JrIElQIjsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodGhpcy5uZXR3b3Jrcy5sZW5ndGggPT0gMSkgewogICAgICAgICAgcmV0dXJuIHRoaXMubmV0d29ya3NbMF0uaXA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiAiTXVsdGlwbGUgTmV0d29ya3MiOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGluZm9Ib3N0c051bWJlcjogZnVuY3Rpb24gaW5mb0hvc3RzTnVtYmVyKCkgewogICAgICB2YXIgY291bnQgPSAwOwogICAgICB0aGlzLm5vZGVzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgICBlbGVtZW50LmRlbGV0ZSA9PSBmYWxzZSA/IGNvdW50KysgOiBudWxsOwogICAgICB9KTsKCiAgICAgIGlmICh0aGlzLm5ldHdvcmtzLmxlbmd0aCA8IDEpIHsKICAgICAgICByZXR1cm4gIkhvc3RzIjsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodGhpcy5uZXR3b3Jrcy5sZW5ndGggPT0gMSkgewogICAgICAgICAgcmV0dXJuICIiLmNvbmNhdChjb3VudCwgIi8iKS5jb25jYXQodGhpcy5uZXR3b3Jrc1swXS5zaXplKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuICJIb3N0czogIi5jb25jYXQoY291bnQpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfTs="},{"version":3,"sources":["NewNetworkCatalog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAqBA;AACA,OAAA,qBAAA,MAAA,6BAAA;AACA,OAAA,QAAA,MAAA,iBAAA,C,CACA;;AACA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,qBAAA,EAAA,qBADA;AAEA,IAAA,QAAA,EAAA;AAFA,GAFA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KADA;AAIA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KAJA;AAOA,IAAA,YAAA,EAAA;AAPA,GANA;AAeA,EAAA,OAAA,EAAA;AACA,IAAA,cADA,0BACA,KADA,EACA;AACA,WAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,MAAA,IAAA,KAAA,GAAA,OAAA,CAAA,QAAA,CAAA,KAAA,CAAA,GAAA,IAAA;AACA,OAFA;AAGA,KALA;AAOA,IAAA,OAPA,qBAOA;AACA,UAAA,KAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,YAAA;AACA,OAFA,MAEA;AACA,YAAA,KAAA,QAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,iBAAA,KAAA,QAAA,CAAA,CAAA,EAAA,EAAA;AACA,SAFA,MAEA;AACA,iBAAA,mBAAA;AACA;AACA;AACA,KAjBA;AAmBA,IAAA,eAnBA,6BAmBA;AACA,UAAA,KAAA,GAAA,CAAA;AACA,WAAA,KAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AAAA,QAAA,OAAA,CAAA,MAAA,IAAA,KAAA,GAAA,KAAA,EAAA,GAAA,IAAA;AAAA,OAAA;;AACA,UAAA,KAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,OAAA;AACA,OAFA,MAEA;AACA,YAAA,KAAA,QAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,2BAAA,KAAA,cAAA,KAAA,QAAA,CAAA,CAAA,EAAA,IAAA;AACA,SAFA,MAEA;AACA,kCAAA,KAAA;AACA;AACA;AACA;AA/BA;AAfA,CAAA","sourcesContent":["<template>\r\n<div class=\"new-net-catalog\">\r\n  <div class=\"info\">\r\n      <span class=\"network\">{{ infoNet() }}</span>\r\n      <span class=\"ips\">{{ infoHostsNumber() }} <i v-if=\"finishedScan.length > 0 ? true : false\" class=\"fa fa-cog fa-spin fa-lg fa-fw\"></i></span>\r\n      <span class=\"all\"><span class=\"text\">All</span><Checkbox class=\"checkbox\" @changed=\"checkAllChange\"/></span>\r\n  </div>\r\n  <div class=\"nodes\">\r\n      <NewNetworkCatalogNode \r\n        v-for=\"node in nodes\"\r\n        :key=\"node.id\"\r\n        :node=\"node\"\r\n        ref=\"nodesRef\"\r\n\r\n      />\r\n      <!-- <NewNetworkCatalogNode ip=\"{{ nodes[0].ip }}\"/> -->\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n// import { reactive } from 'vue';\r\nimport NewNetworkCatalogNode from './NewNetworkCatalogNode.vue'\r\nimport Checkbox from '../checkbox.vue'\r\n// import { toRef } from 'vue'\r\nexport default {\r\n  name: 'NewNetwork',\r\n  components: {\r\n    NewNetworkCatalogNode,\r\n    Checkbox\r\n  },\r\n  props: {\r\n    nodes: {\r\n      type: Array\r\n    },\r\n    networks: {\r\n      type: Array\r\n    },\r\n    finishedScan:{}\r\n  },\r\n  methods: {\r\n    checkAllChange(value){\r\n      this.$refs.nodesRef.forEach(element => {\r\n        element.node.delete == false ? element.checkAll(value) : null\r\n      });\r\n    },\r\n\r\n    infoNet(){\r\n      if(this.networks.length < 1){\r\n        return \"Network IP\";\r\n      } else {\r\n        if(this.networks.length == 1){\r\n          return this.networks[0].ip;\r\n        } else {\r\n          return \"Multiple Networks\"\r\n        }\r\n      }\r\n    },\r\n    \r\n    infoHostsNumber(){\r\n      let count = 0;\r\n      this.nodes.forEach((element) => { element.delete == false ? count++ : null});\r\n      if(this.networks.length < 1){\r\n        return \"Hosts\";\r\n      }else{\r\n        if(this.networks.length == 1){\r\n          return `${count}/${this.networks[0].size}`\r\n        }else {\r\n          return `Hosts: ${count}`\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"../../style/variables\";\r\n\r\n.new-net-catalog {\r\n//   background-color: $primarydark;\r\n  width: 1fr;\r\n  height: 1fr;\r\n  display: grid;\r\n  font-weight: bold;\r\n  grid-gap: 10px;\r\n  grid-template-areas: \r\n    \"info\"\r\n    \"nodes\";\r\n\r\n  .info {\r\n    display: grid;\r\n    flex-direction: row;\r\n    color: $primary;\r\n    width: 90%;\r\n    // background-color: lightblue;\r\n    // grid-gap: 10px;\r\n    font-size: 1.3rem;\r\n    grid-template-columns: 1fr 3fr 1fr;\r\n    grid-template-areas: \r\n      \"ips network all\";\r\n\r\n    .network {\r\n      grid-area: network;\r\n      // background-color: lightskyblue;\r\n      // width: 10%;\r\n      // flex-grow: 1;\r\n    }\r\n    .ips {\r\n      grid-area: ips;\r\n      width: 1fr;\r\n      // background-color: lightsalmon;\r\n      // flex-grow: 3;\r\n    }\r\n    .all {\r\n      grid-area: all;\r\n      justify-content: end; \r\n      width: 100%;\r\n      // background-color: lightcoral;\r\n      grid-template-columns: 0.8fr 2fr 2fr;\r\n      grid-template-areas: \r\n      \". checktext checkbox\";\r\n      grid-gap: 0px;\r\n      // flex-grow: 0.9;\r\n      // justify-self: flex-end;\r\n      display: grid;\r\n      .text {\r\n        grid-area: checktext;\r\n        margin: 0;\r\n        padding: 0;\r\n        // background-color: lightgreen;\r\n        // width: 100%;\r\n      }\r\n      .checkbox {\r\n        grid-area: checkbox;\r\n        // background-color: lightgray;\r\n        // width: 100%;\r\n        margin: 0;\r\n        padding: 0;\r\n        height: 100%;\r\n      }\r\n    }\r\n\r\n  }\r\n  .nodes {\r\n    width: 1fr;\r\n    height: 10em;\r\n    // display: grid;\r\n    // padding: 1em;\r\n  }\r\n\r\n  @media screen and (max-width: 1281px) {\r\n\r\n    .info {\r\n      grid-template-columns: 1fr 3fr 1fr;\r\n      width: 100%;\r\n    }\r\n\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n\r\n    .info {\r\n      grid-template-columns: 2fr 3fr 2fr;\r\n      width: 100%;\r\n    }\r\n  //     .nodes {\r\n  //   width: 1fr;\r\n  //   height: 10em;\r\n  //   // display: grid;\r\n  //   // padding: 1em;\r\n  // }\r\n\r\n  }\r\n\r\n//   .nodes {\r\n//     //   margin-bottom: 1em;\r\n//   }\r\n}\r\n\r\n</style>"],"sourceRoot":"src/components/NewNetwork"}]}